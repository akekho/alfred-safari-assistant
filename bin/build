#!/usr/bin/env zsh

# Path to this script's directory (i.e. workflow root)
here="$( cd "$( dirname "$0" )"; pwd )"
root="$( cd "$here/../"; pwd )"
builddir="${root}/build"
distdir="${root}/dist"

source "${root}/alfred_env.sh"

build=true
devmode=true
runtests=false
force=false
verbose=

# log <arg>... | Echo args to STDERR
log() {
  echo "$@" >&2
}

# cleanup | Delete temporary build files
cleanup() {
  log "cleaning build directory ..."
  test -d "$builddir" && rm $verbose -rf "${builddir}/"*
}

# usage | Show usage message
usage() {
  cat <<EOS
build-workflow.sh [-h] [-d] [-t] [-v] [-x]

Build workflow from source code in ./build directory.
Use -d to also build an .alfredworkflow file.

Usage:
  build-workflow.sh [-d] [-t] [-f] [-v] [-x]
  build-workflow.sh -h

Options:
  -d  Distribution. Also build .alfredworkflow file.
  -f  Force. Overwrite existing files.
  -t  Also run unit tests.
  -v  Be verbose.
  -x  Don't build executable.
  -h  Show this message and exit.
EOS
}

# -------------------------------------------------------
# CLI options
while getopts ":dfhtvx" opt; do
  case $opt in
    d)
      devmode=false
      ;;
    f)
      force=true
      ;;
    h)
      usage
      exit 0
      ;;
    t)
      runtests=true
      ;;
    v)
      verbose="-v"
      ;;
    x)
      build=false
      ;;
    \?)
      log "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

test -z "$root" && { log "Couldn't find workflow directory"; exit 1 }


pushd "$root" &>/dev/null
# -------------------------------------------------------
# Run unit tests
$runtests && {
  log "running unit tests ..."
  go test -v . || exit 1
}

# -------------------------------------------------------
# Build
$build && {
  log "building executable(s) ..."
  go build $verbose -o ./alsf .
}

test -d "${builddir}" && cleanup

log "hardlinking assets to build directory ..."
# mkdir -vp "$builddir"
mkdir $verbose -p "${builddir}/scripts/"{tab,url}
mkdir $verbose -p "${builddir}/icons"

pushd "$builddir" &>/dev/null

ln $verbose ../*.png .
ln $verbose ../info.plist .
ln $verbose ../alsf .
ln $verbose ../README.* .
ln $verbose ../LICENCE.txt .

pushd ./icons &>/dev/null
ln $verbose ../../icons/*.png .
popd &>/dev/null

pushd ./scripts/tab &>/dev/null
ln $verbose ../../../scripts/tab/* .
popd &>/dev/null

pushd ./scripts/url &>/dev/null
ln $verbose ../../../scripts/url/* .

popd &>/dev/null
popd &>/dev/null

# -------------------------------------------------------
# Build .alfredworkflow file
$devmode || {
  test -d "${distdir}" || mkdir -p "$distdir"

  zipname="$( ./alsf distname 2>/dev/null )"
  outpath="${distdir}/${zipname}"

  test -f "${outpath}" && {
    $force && {
      rm $verbose "${outpath}"
    } || {
      log "destination file already exists. Use -f to overwrite."
      exit 1
    }
  }

  log "building .alfredworkflow file ..."

  pushd "$builddir" &>/dev/null
  zip -9 -r "${outpath}" ./*
  ST_ZIP=$?
  test "$ST_ZIP" -ne 0 && {
    log "error creating .alfredworkflow file."
    popd &>/dev/null
    popd &>/dev/null
    exit $ST_ZIP
  }

  popd &>/dev/null
  log "wrote '${zipname}' file in '$( pwd )'"
}

popd &>/dev/null
